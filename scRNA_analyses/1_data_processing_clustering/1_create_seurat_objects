#R version 4.1.0
install.packages("dplyr")
install.packages("Seurat")
install.packages("patchwork")
reticulate::py_install(packages ='umap-learn')

library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(cowplot)
library(reticulate)
library(tidyr)
library(reshape2)
library(plyr)
library(grid)
library(gridExtra)
library(data.table)


# Create batch names list and cell numbers matrix -------------------------

batchNames_list <- c("capture1", "capture2", "capture3", "capture4", "capture5", "capture6", "capture7", "capture8", "capture9", "capture10", "capture11", "capture12", "capture13", "capture14")
batch_cell_numbers <- matrix(nrow = length(batchNames_list), ncol = 3)


# Read all batches separately -------------------------

for (i in 1:length(batchNames_list)){
  
  batch <- batchNames_list[i]
  data <- Read10X(data.dir = paste0("INPUTS/",batch,"_output/outs/filtered_feature_bc_matrix"))
  
  batch_cell_numbers[i,] <- c(batch, dim(data)[1], dim(data)[2]) #Create a table with num_genes and num_cells for each capture
  
  assign(paste0(batch), data)
  if(i %% 5 == 0){print(i)}
}

batch_cell_numbers <- as.data.frame(batch_cell_numbers)
colnames(batch_cell_numbers) <- c("batchID","num_genes","num_cells")
write.table(batch_cell_numbers, "number_cells_per_batch.txt", quote = FALSE)

batchList <- batchNames_list
batchObjectList <- list(capture1, capture2, capture3, capture4, capture5, capture6, capture7, capture8, capture9, capture10, capture11, capture12, capture13, capture14)

saveRDS(batchList, file="OUTPUTS/batchList.rds")
saveRDS(batchObjectList, file="OUTPUTS/batchObjectList.rds")

###### Read in demuxlet data (demuxlet best files were converted to csv in excel and barcodes were edited to exlude "-1" at the end)

demuxlet_out_list <- c("capture1_demuxlet", "capture2_demuxlet", "capture3_demuxlet", "capture4_demuxlet", "capture5_demuxlet", "capture6_demuxlet", "capture7_demuxlet", "capture8_demuxlet", "capture9_demuxlet", "capture10_demuxlet", "capture11_demuxlet", "capture12_demuxlet", "capture13_demuxlet", "capture14_demuxlet")

for (i in 1:length(demuxlet_out_list)){
  
  demuxlet_out <- demuxlet_out_list[i]
  data <- read.csv(file=paste0("OUTPUTS/demuxlet_csv_outs/",demuxlet_out,"_out.csv"), header=TRUE)
  
  assign(paste0(demuxlet_out), as.data.frame(data))
}

demuxlet_data_list <- list(capture1_demuxlet, capture2_demuxlet, capture3_demuxlet, capture4_demuxlet, capture5_demuxlet, capture6_demuxlet, capture7_demuxlet, capture8_demuxlet, capture9_demuxlet, capture10_demuxlet, capture11_demuxlet, capture12_demuxlet, capture13_demuxlet, capture14_demuxlet)


# Create Seurat objects and add demuxlet assignments ----------------------

demuxlet_class_percentages <- matrix(nrow = length(demuxlet_data_list), ncol = 7)

for (i in 1:length(batchList)){
  
  batch <- batchList[i]
  batchObject <- batchObjectList[[i]]
  
  seuratObject <- CreateSeuratObject(counts = batchObject, project = paste0(batch), min.cells = 5)
  seuratObject$batchID <- paste0(batch)
  seuratObject[["percent.mt"]] <- PercentageFeatureSet(seuratObject, pattern = "^MT-")
  
  ## add demuxlet data
  demuxlet_data <- demuxlet_data_list[[i]]
  demuxlet_data <- as.data.frame(demuxlet_data[c("BARCODE","BEST")])
  rownames(demuxlet_data) <- paste0(demuxlet_data$BARCODE,"-1")
  demuxlet_data$BARCODE <- NULL
  
  ## check order
  print(length(which(rownames(demuxlet_data)!=rownames(seuratObject@meta.data))))
  seuratObject <- AddMetaData(seuratObject, demuxlet_data)
  
  ## demuxlet doublets/singlets/unassigned
  singlets <- 0
  doublets <- 0
  ambiguous <- 0
  singlets_total <- 0
  doublets_total <- 0
  ambiguous_total <- 0
  demuxlet_status <- vector(length=length(seuratObject@meta.data$BEST))
  for (j in 1:length(seuratObject@meta.data$BEST))
  {
    if(grepl("SNG",seuratObject@meta.data$BEST[j])==TRUE)
    {
      singlets_total <- singlets_total + 1
      demuxlet_status[j] <- "singlet"
    }
    if(grepl("DBL",seuratObject@meta.data$BEST[j])==TRUE)
    {
      doublets_total <- doublets_total + 1
      demuxlet_status[j] <- "doublet"
    }
    if(grepl("AMB",seuratObject@meta.data$BEST[j])==TRUE)
    {
      ambiguous_total <- ambiguous_total + 1
      demuxlet_status[j] <- "ambiguous"
    }
  }
  seuratObject@meta.data$demuxlet_status <- demuxlet_status
  singlets <- singlets_total/length(seuratObject@meta.data$BEST)
  doublets <- doublets_total/length(seuratObject@meta.data$BEST)
  ambiguous <- ambiguous_total/length(seuratObject@meta.data$BEST)
  
  print(singlets)
  print(doublets)
  print(ambiguous)
  print(singlets_total + doublets_total + ambiguous_total)
  demuxlet_class_percentages[i,] <- c(batch, singlets, doublets, ambiguous, singlets_total, doublets_total, ambiguous_total)
  
  assign(paste0(batch,"_unfilt"), seuratObject)
  print(batch)
  
}



# Create and save a merged unfiltered seurat object -----------------------

merge_unfilt <- merge(capture1_unfilt, y = c(capture2_unfilt, capture3_unfilt, capture4_unfilt, capture5_unfilt, capture6_unfilt, capture7_unfilt, capture8_unfilt, capture9_unfilt, capture10_unfilt, capture11_unfilt, capture12_unfilt, capture13_unfilt, capture14_unfilt), add.cell.ids = batchList, project = "BM_CD34_scRNA_unfiltered")
saveRDS(merge_unfilt, file = "OUTPUTS/merged_UNFILTERED_seuratObject.rds")
fwrite(merge_unfilt@meta.data, "OUTPUTS/all_cells_unfiltered_metadata.txt")





seuratObjectList_unfilt <- c(capture1_unfilt, capture2_unfilt, capture3_unfilt, capture4_unfilt, capture5_unfilt, capture6_unfilt, capture7_unfilt, capture8_unfilt, capture9_unfilt, capture10_unfilt, capture11_unfilt, capture12_unfilt, capture13_unfilt, capture14_unfilt)


# Get percent mt stats for unfiltered objects -----------------------------

avg_mt <- vector(length=length(seuratObjectList_unfilt))
sd_mt <- vector(length=length(seuratObjectList_unfilt))
for (i in 1:length(seuratObjectList_unfilt)){
  
  obj <- seuratObjectList_unfilt[[i]]
  avg_mt[i] <- mean((obj@meta.data)$percent.mt)
  sd_mt[i] <- sd((obj@meta.data)$percent.mt)
}

percent_mt_stats_unfiltered <- data.frame(
  average_percent_mt <- avg_mt,
  sd_percent_mt <- sd_mt
)
row.names(percent_mt_stats_unfiltered) <- batchNames_list
colnames(percent_mt_stats_unfiltered) <- c("average_percent_mt", "sd_percent_mt")
write.table(percent_mt_stats_unfiltered, "percent_mt_stats_unfiltered.txt")



# Get nRNA and nFeature stats for unfiltered objects ----------------------

avg_nRNA <- vector(length=length(seuratObjectList_unfilt))
sd_nRNA <- vector(length=length(seuratObjectList_unfilt))
avg_nFeature <- vector(length=length(seuratObjectList_unfilt))
sd_nFeature <- vector(length=length(seuratObjectList_unfilt))
for (i in 1:length(seuratObjectList_unfilt)){
  
  obj <- seuratObjectList_unfilt[[i]]
  avg_nRNA[i] <- mean((obj@meta.data)$nCount_RNA)
  sd_nRNA[i] <- sd((obj@meta.data)$nCount_RNA)
  avg_nFeature[i] <- mean((obj@meta.data)$nFeature_RNA)
  sd_nFeature[i] <- sd((obj@meta.data)$nFeature_RNA)
}

nRNA_nFeature_stats_unfiltered <- data.frame(
  average_nRNA <- avg_nRNA,
  sd_nRNA <- sd_nRNA,
  average_nFeature <- avg_nFeature,
  sd_nFeature <- sd_nFeature
)
row.names(nRNA_nFeature_stats_unfiltered) <- batchNames_list
colnames(nRNA_nFeature_stats_unfiltered) <- c("average_nRNA", "sd_nRNA", "average_nFeature", "sd_nFeature")
write.table(nRNA_nFeature_stats_unfiltered, "nRNA_nFeature_stats_unfiltered.txt")



# Filter each unfilt Seurat object individually ---------------------------

cell_nums_unfiltered <- vector(length=length(seuratObjectList_unfilt))
cell_nums_singlets <- vector(length=length(seuratObjectList_unfilt))
cell_nums_singlets_QCfiltered <- vector(length=length(seuratObjectList_unfilt))
cell_nums_percent_singlets_retained <- vector(length=length(seuratObjectList_unfilt))
for (i in 1:length(seuratObjectList_unfilt)){
  
  batch <- batchList[i]
  seuratObject <- seuratObjectList_unfilt[[i]]
  
  pdf(paste0("OUTPUTS/QC_plots/before_filtering/",batch,"_feature_count_MTperc_beforeSubset.pdf"), height = 5, width = 8)
  print(VlnPlot(seuratObject, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3))
  dev.off()
  
  pdf(paste0("OUTPUTS/QC_plots/before_filtering/",batch,"_feature-feature_relationships_beforeSubset.pdf"), height = 5, width = 10)
  plot1 <- FeatureScatter(seuratObject, feature1 = "nCount_RNA", feature2 = "percent.mt")
  plot2 <- FeatureScatter(seuratObject, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
  print(plot1 + plot2)
  dev.off()
  
  cell_nums_unfiltered[i] <- dim(seuratObject)[2]
  
  ## remove doublets and ambiguous assignments based on demuxlet call 
  print(batch)
  print(dim(seuratObject)[2])
  seuratObject <- subset(seuratObject, subset = demuxlet_status == "singlet")
  print("number of singlets")
  print(dim(seuratObject)[2])
  cell_nums_singlets[i] <- dim(seuratObject)[2]
  
  ## subset for QC
  seuratObject <- subset(seuratObject, subset = percent.mt < 15 & nCount_RNA > 500)  # other potential filters: Feature_RNA > 500 & nFeature_RNA < 6000 (left out for now) 
  assign(paste0(batch,"_filt"), seuratObject)
  
  print("after QC")
  print(dim(seuratObject)[2])
  cell_nums_singlets_QCfiltered[i] <- dim(seuratObject)[2]
  cell_nums_percent_singlets_retained[i] <- (cell_nums_singlets_QCfiltered[i]/cell_nums_singlets[i])*100
}

seuratObjectList <- c(capture1_filt, capture2_filt, capture3_filt, capture4_filt, capture5_filt, capture6_filt, capture7_filt, capture8_filt, capture9_filt, capture10_filt, capture11_filt, capture12_filt, capture13_filt, capture14_filt)



# plots for each object after filtering -----------------------------------

for (i in 1:length(seuratObjectList)){
  
  batch <- batchList[i]
  seuratObject <- seuratObjectList[[i]]
  
  ## all QC seurat plots
  pdf(paste0("OUTPUTS/QC_plots/after_filtering/",batch,"_feature_count_MTperc.pdf"), height = 5, width = 8)
  print(VlnPlot(seuratObject, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3))
  dev.off()
  
  pdf(paste0("OUTPUTS/QC_plots/after_filtering/",batch,"_feature-feature_relationships_scatter.pdf"), height = 5, width = 10)
  plot1 <- FeatureScatter(seuratObject, feature1 = "nCount_RNA", feature2 = "percent.mt")
  plot2 <- FeatureScatter(seuratObject, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
  print(plot1 + plot2)
  dev.off()
  
  print(i)
}


# process and save class percentages and cell nums data -------------------

demuxlet_class_percentages <- as.data.frame(demuxlet_class_percentages)
colnames(demuxlet_class_percentages) <- c("batchID","perc_singlet","perc_doublet","perc_ambiguous", "singlet_total", "doublet_total", "ambiguous_total")
demuxlet_class_percentages$perc_singlet <- round(as.numeric(as.character(demuxlet_class_percentages$perc_singlet)), 4)
demuxlet_class_percentages$perc_doublet <- round(as.numeric(as.character(demuxlet_class_percentages$perc_doublet)), 4)
demuxlet_class_percentages$perc_ambiguous <- round(as.numeric(as.character(demuxlet_class_percentages$perc_ambiguous)), 4)
demuxlet_class_percentages$singlet_total <- round(as.numeric(as.character(demuxlet_class_percentages$singlet_total)), 4)
demuxlet_class_percentages$doublet_total <- round(as.numeric(as.character(demuxlet_class_percentages$doublet_total)), 4)
demuxlet_class_percentages$ambiguous_total <- round(as.numeric(as.character(demuxlet_class_percentages$ambiguous_total)), 4)
write.table(demuxlet_class_percentages, "OUTPUTS/demuxlet_class_stats.txt", quote = FALSE, row.names = FALSE)

cell_nums_final <- cbind(cell_nums_unfiltered, cell_nums_singlets, cell_nums_singlets_QCfiltered, cell_nums_percent_singlets_retained)
row.names(cell_nums_final) <- batchNames_list
write.table(cell_nums_final, "OUTPUTS/cell_numbers_after_QC_summary.txt", quote = FALSE, row.names = TRUE)


# merge filtered Seurat objects -------------------------------------------

mergeAllCells <- merge(capture1_filt, y = c(capture2_filt, capture3_filt, capture4_filt, capture5_filt, capture6_filt, capture7_filt, capture8_filt, capture9_filt, capture10_filt, capture11_filt, capture12_filt, capture13_filt, capture14_filt), add.cell.ids = batchList, project = "BM_CD34_scRNA")

saveRDS(mergeAllCells, file = "OUTPUTS/merged_filtered_NOLABEL_seuratObject.rds")

# Add Td0/Tm3 label -------------------------------------------------------
timepoint <- vector(length=length(mergeAllCells$BEST))
for (i in 1:length(mergeAllCells$BEST))
{
  subset_temp <- mergeAllCells@meta.data[i,]
  if (subset_temp$batchID == "capture1")
  {
    if(subset_temp$BEST == "SNG-LB-SS-1S-RS-S8-CD34neg_S7_R1_001")
      timepoint[i] <- "Td0"
    else
      timepoint[i] <- "Tm3"
  }
  else
    if(subset_temp$batchID %in% c("capture3", "capture5", "capture7", "capture9", "capture11", "capture13"))
      timepoint[i] <- "Td0"
    else
      timepoint[i] <- "Tm3"
}

mergeAllCells$timepoint <- timepoint
mergeAllCells$timepoint <- factor(mergeAllCells$timepoint, levels = c("Td0","Tm3"))



# Add CTL/BCG label -------------------------------------------------------

CTL <- c("SNG-LB-SS-1S-RS-S13-CD34neg_S12_R1_001", "SNG-LB-SS-1S-RS-S7-CD34neg_S6_R1_001", "SNG-LB-SS-1S-RS-S11-CD34neg_S10_R1_001", "SNG-LB-SS-1S-RS-S3-CD34neg_S3_R1_001", "SNG-LB-SS-1S-RS-S18-CD34neg_S17_R1_001")
mergeAllCells$vaccination <- ifelse(mergeAllCells@meta.data$BEST %in% CTL, "CTL", "BCG")
mergeAllCells$vaccination <- factor(mergeAllCells$vaccination, levels = c("CTL","BCG"))


saveRDS(mergeAllCells, file = "OUTPUTS/merged_filtered_seuratObject.rds")
#save.image(file = "mergedAllCells_seuratObject_environment.RData")
